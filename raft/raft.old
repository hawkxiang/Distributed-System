package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

//import "fmt"
import "sync"
import "labrpc"
import "bytes"
import "encoding/gob"
import "time"
import "math/rand"



//
// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make().
//
type ApplyMsg struct {
	Index       int
	Command     interface{}
	UseSnapshot bool   // ignore for lab2; only used in lab3
	Snapshot    []byte // ignore for lab2; only used in lab3
}

type Entry struct {
	Term 		int
	Command 	interface{}
}

//
// A Go object implementing a single Raft peer.
//
type Raft struct {
	mu        sync.Mutex
	peers     []*labrpc.ClientEnd
	persister *Persister
	me        int // index into peers[]

	// Your data here.
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.
	//persistent state
	CurrentTerm int
	VotedFor	int
	Log		[]Entry

	//volatile state
	commitIndex	int
	lastApplied int

	//volatile state on leaders
	leaderstate *LeaderState

	//election timer
	etimer 	*time.Timer
}

type LeaderState struct {
	nextIndex	[]int
	matchIndex	[]int
}

const InvalidVote = -10

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {

	var term int
	var isleader bool
	// Your code here.
	/*send heartbeat to check state
	if !(rf.etimer).Stop() {
			<-rf.etimer.C
	}*/
	//rf.etimer.Reset(time.Millisecond * time.Duration(0))
	rf.mu.Lock()
	
	term = rf.CurrentTerm
	isleader = false
	if rf.VotedFor == rf.me && rf.leaderstate != nil{
		isleader = true
	}
	defer rf.mu.Unlock()
	return term, isleader
}

//
// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
//
func (rf *Raft) persist() {
	// Your code here.
	// Example:
	// w := new(bytes.Buffer)
	// e := gob.NewEncoder(w)
	// e.Encode(rf.xxx)
	// e.Encode(rf.yyy)
	// data := w.Bytes()
	// rf.persister.SaveRaftState(data)mu        sync.Mutex
	w := new(bytes.Buffer)
	e := gob.NewEncoder(w)
	e.Encode(rf.CurrentTerm)
	e.Encode(rf.VotedFor)
	e.Encode(rf.Log)
	data := w.Bytes()
	rf.persister.SaveRaftState(data)
}

//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	// Your code here.
	// Example:
	// r := bytes.NewBuffer(data)
	// d := gob.NewDecoder(r)
	// d.Decode(&rf.xxx)
	// d.Decode(&rf.yyy)
	r := bytes.NewBuffer(data)
	d := gob.NewDecoder(r)
	d.Decode(&rf.CurrentTerm)
	d.Decode(&rf.VotedFor)
	d.Decode(&rf.Log)
}




//
// example RequestVote RPC arguments structure.
//
type RequestVoteArgs struct {
	// Your data here.
	Term 			int
	CandidateId		int
	LastLogIndex	int
	LastLogTerm		int
}

//
// example RequestVote RPC reply structure.
//
type RequestVoteReply struct {
	// Your data here.
	Term 		int
	VoteGranted	bool
}
//AppendEntries RPC arguments structure.
type AppendEntriesArgs struct {
	Term 			int
	LeaderId 		int
	PrevLogIndex	int
	PrevLogTerm		int
	Entries 		[]Entry
	LeaderCommit	int
}

//AppendEntries RPC reply structure.
type AppendEntriesReply struct {
	Term 	int
	Success bool
}

//
// example RequestVote RPC handler.
//
func (rf *Raft) RequestVote(args RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here.
	//need lock, ever handle need step by step
	rf.mu.Lock()
	
	if args.Term > rf.CurrentTerm {
		rf.CurrentTerm = args.Term
		reply.VoteGranted = true
		rf.VotedFor = args.CandidateId
	} else if args.Term == rf.CurrentTerm && (rf.VotedFor == InvalidVote || rf.VotedFor == args.CandidateId) {
		lastindex := len(rf.Log) - 1
		lastitem := rf.Log[lastindex].Term
		if args.LastLogTerm > lastitem || (args.LastLogTerm == lastitem && args.LastLogIndex >= lastindex) {
			reply.VoteGranted = true
			rf.VotedFor = args.CandidateId
		} else {
			reply.VoteGranted = false
		}
	
	} else {
		reply.VoteGranted = false
	}
	reply.Term = rf.CurrentTerm
	rf.mu.Unlock()
}

func (rf *Raft) AppendEntries(args AppendEntriesArgs, reply *AppendEntriesReply) {
	//followers reset timer
	rf.mu.Lock()
	
	if !(rf.etimer).Stop() {
		<-rf.etimer.C
	}
	rf.etimer.Reset(time.Millisecond * time.Duration(random(150, 300)))
	//heartbeats
	if args.Entries == nil {
		if args.Term < rf.CurrentTerm {
			reply.Success = false
		} else {
			rf.CurrentTerm = args.Term
			rf.VotedFor = args.LeaderId
			reply.Success = true
		}
	}
	reply.Term = rf.CurrentTerm

	rf.mu.Unlock()
}

//
// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// returns true if labrpc says the RPC was delivered.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
//
func (rf *Raft) sendRequestVote(server int, args RequestVoteArgs, reply *RequestVoteReply) bool {
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)
	return ok
}

//code to send a AppendEntries RPC to a server.
// for heartbeats 
func (rf *Raft) sendAppendEntries(server int, args AppendEntriesArgs, reply *AppendEntriesReply) bool {
	ok := rf.peers[server].Call("Raft.AppendEntries", args, reply)
	return ok
}

//
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := false
	//leader
	if rf.VotedFor == rf.me && rf.leaderstate != nil {
		isLeader = true
	}

	return index, term, isLeader
}

//
// the tester calls Kill() when a Raft instance won't
// be needed again. you are not required to do anything
// in Kill(), but it might be convenient to (for example)
// turn off debug output from this instance.
//
func (rf *Raft) Kill() {
	// Your code here, if desired.
}

//
// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
//
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here.
	rf.commitIndex = 0
	rf.lastApplied = 0
	//Reinitialized after election
	rf.leaderstate = nil
	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())
	//To eliminate valid Log index == 0, insert a pad entry int index 0.
	if len(rf.Log) == 0 {
		rf.Log = append(rf.Log, Entry{0, 0})
		rf.CurrentTerm = 0
		rf.VotedFor = InvalidVote
	}

	if rf.VotedFor == rf.me {
		//maybe a leader. if restart from crash and next election has not began
		num := len(peers)
		rf.leaderstate = new(LeaderState)
		rf.leaderstate.nextIndex = make([]int, num)
		rf.leaderstate.matchIndex = make([]int, num)
		for i := 0; i < num; i++ {
			rf.leaderstate.nextIndex[i] = num
			rf.leaderstate.matchIndex[i] = 0
		}
		rf.etimer = time.NewTimer(time.Millisecond * time.Duration(10))
	} else {
		rf.etimer = time.NewTimer(time.Millisecond * time.Duration(random(150, 300)))
	}
	
	go func(rf *Raft) {
		for {
			//time elapse to expired 
			<- rf.etimer.C
			//Heartbeat check is a leader, of send append request
			rf.mu.Lock()
			if rf.VotedFor == rf.me && rf.leaderstate != nil{
				rf.etimer.Reset(time.Millisecond * 10)
				args := &AppendEntriesArgs{rf.CurrentTerm, me, 0, 0, nil, rf.commitIndex}
				rf.mu.Unlock()

				go func (rf *Raft, args *AppendEntriesArgs) {
					mutex := new(sync.Mutex)
					cond := sync.NewCond(mutex)
					num := len(peers)
					agree := 1

					//send heartbeats
					for i := 0; i < num; i++ {
						if i == me {
							continue
						}

						go func(server int, cond *sync.Cond) {
							r := new(AppendEntriesReply)
							ok := rf.sendAppendEntries(server, *args, r)
							if !ok {
								//rf.mu.Lock()
								if r.Term > rf.CurrentTerm {
									//convert to follower
									rf.CurrentTerm = r.Term
									rf.VotedFor = InvalidVote

									if !(rf.etimer).Stop() {
										<-rf.etimer.C
									}
									rf.etimer.Reset(time.Millisecond * time.Duration(random(150, 300)))	

									cond.L.Lock()
									agree = -num
									cond.Signal()
									cond.L.Unlock()
								}
								//rf.mu.Unlock()
							} else {
								cond.L.Lock()
								agree++
								cond.Signal()
								cond.L.Unlock()
							}
						}(i, cond)
					}
					cond.L.Lock()
					for ; agree > 0 && agree < num; {
						cond.Wait()
					}
					cond.L.Unlock()
					
				}(rf, args)

			} else {
				//selection
				// conversion to condidate
				//there are muti goroutine change server state, so need lock.
				rf.CurrentTerm += 1
				rf.VotedFor = me
				rf.leaderstate = nil   //if candidator, the leaderstate is nil, reinit after win vote
				// reset election timer
				rf.etimer.Reset(time.Millisecond * time.Duration(random(150, 300)))

				lastindex := len(rf.Log) - 1
				lastitem := rf.Log[lastindex].Term
				args := &RequestVoteArgs{rf.CurrentTerm, me, lastindex, lastitem}
				rf.mu.Unlock()


				go func (rf *Raft, args *RequestVoteArgs) {
					//count votes
					num := len(peers)
					agree , allreply := 1, 0

					mutex := new(sync.Mutex)
					cond := sync.NewCond(mutex)

					//request vote
					for i := 0; i < num && agree > 0; i += 1 {
						if i == me {
							continue
						}
						go func(server int, cond *sync.Cond) {
							
							r := new(RequestVoteReply)
							ok := rf.sendRequestVote(server, *args, r)
							if !ok {
								//rf.mu.Lock()
								if r.Term > rf.CurrentTerm{
									//convert to follower
									rf.CurrentTerm = r.Term
									rf.VotedFor = InvalidVote

									if !(rf.etimer).Stop() {
										<-rf.etimer.C
									}
									rf.etimer.Reset(time.Millisecond * time.Duration(random(150, 300)))	

									cond.L.Lock()
									agree = -num
									allreply++
									cond.Signal()
									cond.L.Unlock()
								}
								//rf.mu.Unlock()
							} else {
								cond.L.Lock()
								agree++
								allreply++
								cond.Signal()
								cond.L.Unlock()
							}
						}(i, cond)
					}

					cond.L.Lock()
					for ; agree <= num/2 && (agree + num - allreply) > num/2; {
						cond.Wait()
					}
					cond.L.Unlock()

					// check break loop condition, decision this node can win voting.
					if agree > num/2 {
						// convert to leader
						//reinitialized leader state
						rf.mu.Lock()
						rf.leaderstate = new(LeaderState)
						rf.leaderstate.nextIndex = make([]int, num)
						rf.leaderstate.matchIndex = make([]int, num)
						for i := 0; i < num; i++ {
							rf.leaderstate.nextIndex[i] = lastindex+1
							rf.leaderstate.matchIndex[i] = 0
						}
						// set the timer expired, and send heartbeat
						if !(rf.etimer).Stop() {
							<-rf.etimer.C
						}
						rf.etimer.Reset(time.Millisecond * time.Duration(0))
						rf.mu.Unlock()
					}
				}(rf, args)
			}
		}
	}(rf)
	return rf
}

func random(min, max int) int {
	rand.Seed(time.Now().Unix())
	return rand.Intn(max-min) + min
}
